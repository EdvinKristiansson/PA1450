import matplotlib.pyplot as plt
import matplotlib.dates as dts
import datetime


def place_file_list(name, dic):
    # Opens a file and puts it in two list and output a list
    # name = choosen_fil()
    lista = []
    with open(name, "r") as f:
        if dic == {}:
            for line in f:
                date_time = line[:10]+line[11:13]
                value = line[20:23]
                value = float(value)
                lista = [value]
                dic[date_time] = lista
        else:
            for line in f:
                date_time = line[:10]+line[11:13]
                value = line[20:23]
                value = float(value)
                try:
                    dic[date_time].append(value)
                except:
                    next
    return dic


def options():
    # Lets the user input a choice
    val = input("\nVad vill du göra?\n(1) Läsa in en ny fil \
                \n(2)Välja tidsintervall att visa i grafen \
                \n(3) Visa graf" + "\n(4) Avsluta programmet" + "\nDitt val: ")
    return val


def choosen_file(dic):

    num = int(input(
        "\nVilken fil vill du läsa in?\n1. Lufttemperatur\n2. Solskenstid\n3. Nederbörd\n4. Vind\nVal: "))
    while 0 < num <= 4:
        if num == 1:
            infile = "Online_weather\\LuftTemp.txt"

        elif num == 2:

            infile = "Online_weather\\Solskenstid.txt"

        elif num == 3:
            infile = "Online_weather\\Nederbord_timmar.txt"

        elif num == 4:
            infile = "Online_weather\\Vind_hastighet.txt"

        dic = place_file_list(infile, dic)

        return dic


def timespand_option(dic):
    # Lets the user input a timespand
    timespand = "NOT"
    while timespand == "NOT":
        timespand_start = input(
            "\nSkriv in datumet du vill att grafen ska starta på YYYY-MM-DD: ")
        timespand_stop = input(
            "\nSkriv in datumet du vill att grafen sluta på YYYY-MM-DD: ")
        tst = timespand_start+"00"
        tsp = timespand_stop+"00"
        if float(tst[:4]+tst[5:7]+tst[8:10]) > float(tsp[:4]+tsp[5:7]+tsp[8:10]):
            print(
                f"\nDitt startdatum: {tst} måste vara tidnigare än ditt stopp datum: {tsp}")
        else:
            timespand = "OK"
    dic_2 = {}
    for date_time in dic:
        if date_time > timespand_start and date_time < timespand_stop:
            dic_2[date_time] = dic[date_time]
    return dic_2


def creating_graf(dic):
    # Creats a graf
    List = []
    for key in dic.keys():
        List.append(key)
    start_element1 = min(List)
    start_element = str(start_element1)
    start_element = start_element[:10]
    end_element = max(List)
    end_element = str(end_element)
    end_element = end_element[:10]
    # om det inte är inmatat på fomern eller om fel datum (ex 28 feb)
    start_date = datetime.datetime.strptime(start_element, "%Y-%m-%d")
    end_date = datetime.datetime.strptime(end_element, "%Y-%m-%d")
    diff = end_date - start_date
    days = diff.total_seconds()/86400  # (360024)
    fig, ax = plt.subplots()
    ax.set_title("Weather in Karlskrona")

    if days > 3652 or days == 0:
        ax.set_xlabel("Year")
        months = dts.MonthLocator()
        years_markers = dts.YearLocator()
        ax.xaxis.set_major_locator(years_markers)
        years_format = dts.DateFormatter('%Y')
        ax.xaxis.set_major_formatter(years_format)
        ax.xaxis.set_minor_locator(months)

    elif 14 < days < 365*2:
        ax.set_xlabel("Month")
        months_markers = dts.MonthLocator()
        ax.xaxis.set_major_locator(months_markers)
        months_format = dts.DateFormatter('%m')
        ax.xaxis.set_major_formatter(months_format)

    elif days < 14:
        ax.set_xlabel("Day")
        day_marker = dts.DayLocator()
        ax.xaxis.set_major_locator(day_marker)
        day_format = dts.DateFormatter('%H')
        ax.xaxis.set_major_formatter(day_format)
    color_list = ['g', 'c', 'm', 'r']
    for values1 in range(len(dic[start_element1])):
        x_List = []
        y_List = []
        for values in dic:
            x_value = datetime.datetime.strptime(values, "%Y-%m-%d%H").date()
            x_List.append(x_value)
            y_List.append(dic[values][values1])
        ax.plot(x_List, y_List, color=color_list[values1])

    plt.show()


def run():
    # Run the program
    stop = "Nej"
    dic = {}
    while stop == "Nej":
        val = options()
        if val == "1":
            # try:
            dic = choosen_file(dic)
            # except FileNotFoundError as error:
            #     print("\nError message: ", error)
            # except:
            #     print("Försök igen")

        elif val == "2":
            try:
                dic = timespand_option(dic)
            except ValueError as error:
                print(
                    "Tidspandet måste skrivas med siffror i formatet YYYY-MM-DD", error)
            except UnboundLocalError as Un_error:
                print(
                    "En fil måste först läsas in innan du kan bestämma tidsram", Un_error)

        elif val == "3":
            creating_graf(dic)
            # except UnboundLocalError as Un_error:
            #     print("En fil måste först läsas in innan du kan skapa en graf")
            # except IndexError as in_error:
            #     print(f"tidsramen som val är inte acepterar: {in_error}")

        elif val == "4":
            stop = "Ja"


run()
